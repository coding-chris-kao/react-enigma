{"version":3,"sources":["components/LightBulb.tsx","enigma/enigma.ts","App.tsx","enigma/enigma.config.ts","reportWebVitals.ts","index.tsx"],"names":["LightBulb","props","bulb","className","lightOn","letter","START_CODE","PlugBoard","input","this","has","get","plugs","split","p1","p2","set","Map","Rotor","no","offset","length","Error","charCode","charCodeAt","String","fromCharCode","Reflector","Enigma","rotors","reflector","plugBoard","console","log","clear","config","resetConfig","i","rotorlOrders","push","rotorPositions","setPlugs","curValue","toUpperCase","transfer","forwardTransfer","backwardTransfer","addOneTick","temp","enigma","LightBulbRow","bulbs","results","setLightBulbStatus","lightBulbs","row","Object","assign","setConfig","App","defaultLightBulbs","map","useState","chars","setChars","useRef","handleKeyDown","useCallback","e","test","key","output","encrypt","current","code","subtractOneTick","clone","splice","useEffect","document","addEventListener","removeEventListener","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gQAoBeA,MATf,SAAmBC,GACjB,IAAQC,EAASD,EAATC,KAEJC,EAAY,aAGhB,OAFID,EAAKE,UAASD,GAAa,OAExB,qBAAKA,UAAWA,EAAhB,SAA4BD,EAAKG,U,sCCjBpCC,EAAa,GAaNC,EAAb,8JACE,SAAgBC,GACd,OAAKC,KAAKC,IAAIF,GACPC,KAAKE,IAAIH,GADaA,IAFjC,sBAME,SAAgBI,GAAkB,IAAD,gBACdA,GADc,IAC/B,2BAAwB,CAAC,IACvB,EADsB,QACAC,MAAM,IAA5B,mBAAOC,EAAP,KAAWC,EAAX,KACAN,KAAKO,IAAIF,EAAIC,GACbN,KAAKO,IAAID,EAAID,IAJgB,mCANnC,eAA+BG,MAelBC,EAAb,WACE,WAAmBC,EAAmBC,GAAiB,yBAApCD,KAAmC,KAAhBC,SADxC,mDAGE,SAAuBZ,GACrB,GAAqB,IAAjBA,EAAMa,OACR,MAAM,IAAIC,MAAM,0CAElB,IAAIC,EAAWf,EAAMgB,WAAW,GAChC,OAAID,EAAWjB,GAAciB,EAnChB,GAmC4Cf,EAElDiB,OAAOC,aACZpB,GAAeiB,EAAWjB,EAAaG,KAAKW,QAAU,MAX5D,8BAeE,SAAwBZ,GACtB,GAAqB,IAAjBA,EAAMa,OACR,MAAM,IAAIC,MAAM,0CAElB,IAAIC,EAAWf,EAAMgB,WAAW,GAChC,OAAID,EAAWjB,GAAciB,EA/ChB,GA+C4Cf,EAElDiB,OAAOC,aACZpB,GAAe,IAAOiB,EAAWjB,EAAaG,KAAKW,QAAU,IAAO,QAvB1E,KA4BaO,EAAb,WACE,aAAkC,IAAdP,EAAa,uDAAJ,GAAI,yBAAbA,SADtB,4CAGE,SAAgBZ,GACd,GAAqB,IAAjBA,EAAMa,OACR,MAAM,IAAIC,MAAM,8CAElB,IAAIC,EAAWf,EAAMgB,WAAW,GAChC,OAAID,EAAWjB,GAAciB,EA/DhB,GA+D4Cf,EAElDiB,OAAOC,aACZpB,GAAeiB,EAAWjB,EAAaG,KAAKW,QAAU,QAX5D,KAgBaQ,EAAb,WAKE,aAAe,yBAJPC,OAAkB,GAIZ,KAHNC,UAAuB,IAAIH,EAGrB,KAFNI,UAAuB,IAAIxB,EAGjCyB,QAAQC,IAAI,qBANhB,+CASE,WACExB,KAAKoB,OAAS,GACdpB,KAAKsB,UAAUG,UAXnB,uBAcE,SAAiBC,GACf1B,KAAK2B,cAGL,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOG,aAAajB,OAAQgB,IAC9C5B,KAAKoB,OAAOU,KACV,IAAIrB,EAAMiB,EAAOG,aAAaD,GAAIF,EAAOK,eAAeH,KAK5D5B,KAAKsB,UAAUU,SAASN,EAAOvB,SAzBnC,qBA4BE,SAAeJ,GACb,IAAIkC,EAAWlC,EAAMmC,cAGrBD,EAAWjC,KAAKsB,UAAUa,SAASF,GAEnC,IAAK,IAAIL,EAAI,EAAGA,EAAI5B,KAAKoB,OAAOR,OAAQgB,IACtCK,EAAWjC,KAAKoB,OAAOQ,GAAGQ,gBAAgBH,GAI5CA,EAAWjC,KAAKqB,UAAUc,SAASF,GAGnC,IAAK,IAAIL,EAAI5B,KAAKoB,OAAOR,OAAS,EAAGgB,GAAK,EAAGA,IAC3CK,EAAWjC,KAAKoB,OAAOQ,GAAGS,iBAAiBJ,GAQ7C,OALAA,EAAWjC,KAAKsB,UAAUa,SAASF,GAGnCjC,KAAKsC,aAEEL,IAnDX,wBAsDE,WACEjC,KAAKoB,OAAO,GAAGT,SACf,IAAK,IAAIiB,EAAI,EAAGA,EAAI5B,KAAKoB,OAAOR,OAAQgB,IAC5B,IAANA,GAC8B,IAA9B5B,KAAKoB,OAAOQ,EAAI,GAAGjB,QACrBX,KAAKoB,OAAOQ,GAAGjB,WA3DvB,6BAgEE,WACE,IAAI4B,EAAOvC,KAAKoB,OAAO,GAAGT,OAAS,EACnCX,KAAKoB,OAAO,GAAGT,QAAU,GAAK4B,GAAQ,GACtC,IAAK,IAAIX,EAAI,EAAGA,EAAI5B,KAAKoB,OAAOR,OAAQgB,IACtC,GAAU,IAANA,GAC8B,KAA9B5B,KAAKoB,OAAOQ,EAAI,GAAGjB,OAAe,CACpC,IAAI4B,EAAOvC,KAAKoB,OAAOQ,GAAGjB,OAAS,EACnCX,KAAKoB,OAAOQ,GAAGjB,QAAU,GAAK4B,GAAQ,QAvE9C,KClEMC,EAAS,IAAIrB,EAcnB,SAASsB,EAAaC,GACpB,IAD8C,EACxCC,EAAU,GAD8B,cAG7BD,GAH6B,IAG9C,2BAAwB,CAAC,IAAhBjD,EAAe,QACtBkD,EAAQb,KAAK,cAAC,EAAD,CAA6BrC,KAAMA,GAAnBA,EAAKG,UAJU,8BAO9C,OAAO+C,EAGT,SAASC,EACPC,EACAjD,EACAD,GACC,IAAD,gBACgBkD,GADhB,IACA,2BAA4B,CAAC,IAAD,EAAnBC,EAAmB,sBACTA,GADS,IAC1B,2BAAsB,CAAC,IAAdrD,EAAa,QACpB,GAAIA,EAAKG,SAAWA,EAElB,OADAmD,OAAOC,OAAOvD,EAAM,CAAEE,YACfkD,GAJe,gCAD5B,8BASA,OAAOA,EApCTL,EAAOS,UCL8B,CACnCpB,aAAc,CAAC,IAAK,KAAM,OAC1BE,eAAgB,CAAC,EAAG,EAAG,GACvB5B,MAAO,CACL,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QD8EW+C,MAlDf,WACE,IAAMC,EArCc,CAClB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC9C,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAEdC,KAAI,SAACN,GAAD,OACrBA,EAAIM,KAAI,SAACxD,GAAD,MAAa,CAAEA,SAAQD,SAAS,SAgC1C,EAA0B0D,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMV,EAAaW,iBAAOL,GAEpBM,EAAgBC,uBACpB,SAACC,GACC,GAAI,OAAOC,KAAKD,EAAEE,KAAM,CACtB,IAAMC,EAAStB,EAAOuB,QAAQJ,EAAEE,KAChCjB,EAAmBC,EAAWmB,QAASF,GAAQ,GAC/CP,EAAS,GAAD,mBAAKD,GAAL,CAAYQ,KACpBlB,EAAmBC,EAAWmB,QAASF,GAAQ,QAC1C,GAAe,UAAXH,EAAEM,KACXV,EAAS,GAAD,mBAAKD,GAAL,CAAY,YACf,GAAe,cAAXK,EAAEM,KAAsB,CACjC,GAAqB,IAAjBX,EAAM1C,OAAc,OACQ,MAA5B0C,EAAMA,EAAM1C,OAAS,IACvB4B,EAAO0B,kBAET,IAAMC,EAAK,YAAOb,GAClBa,EAAMC,OAAOD,EAAMvD,OAAS,EAAG,GAC/B2C,EAASY,MAGb,CAACb,EAAOT,EAAYU,IAWtB,OARAc,qBAAU,WAGR,OAFAC,SAASC,iBAAiB,UAAWd,GAAe,GAE7C,WACLa,SAASE,oBAAoB,UAAWf,MAEzC,CAACA,IAGF,sBAAK/D,UAAU,MAAf,UACE,iCACE,qBAAK+E,IAAI,kBAAkBC,IAAI,aAGjC,qBAAKhF,UAAU,YAAf,SAA4B4D,IAE5B,qBAAK5D,UAAU,MAAf,SAAsB+C,EAAaI,EAAWmB,QAAQ,MACtD,qBAAKtE,UAAU,MAAf,SAAsB+C,EAAaI,EAAWmB,QAAQ,MACtD,qBAAKtE,UAAU,MAAf,SAAsB+C,EAAaI,EAAWmB,QAAQ,UE7E7CW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASiB,eAAe,SAM1BZ,M","file":"static/js/main.26de597c.chunk.js","sourcesContent":["import './light-bulb.scss'\n\ninterface Props {\n  bulb: LightBulbStatus\n}\n\nexport interface LightBulbStatus {\n  letter: string\n  lightOn: boolean\n}\n\nfunction LightBulb(props: Props) {\n  const { bulb } = props\n\n  let className = 'light-bulb'\n  if (bulb.lightOn) className += ' on'\n\n  return <div className={className}>{bulb.letter}</div>\n}\n\nexport default LightBulb\n","const START_CODE = 65\nconst END_CODE = 90\n\nexport interface EnigmnaConfig {\n  rotorlOrders: string[]\n  rotorPositions: number[]\n  plugs: string[]\n}\n\nexport interface Transferable {\n  transfer(input: string): string\n}\n\nexport class PlugBoard extends Map implements Transferable {\n  public transfer(input: string) {\n    if (!this.has(input)) return input\n    return this.get(input)\n  }\n\n  public setPlugs(plugs: string[]) {\n    for (let plug of plugs) {\n      const [p1, p2] = plug.split('')\n      this.set(p1, p2)\n      this.set(p2, p1)\n    }\n  }\n}\n\nexport class Rotor {\n  constructor(public no: string, public offset: number) {}\n\n  public forwardTransfer(input: string): string {\n    if (input.length !== 1)\n      throw new Error('Rotor.transfer: Input length must be 1')\n\n    let charCode = input.charCodeAt(0)\n    if (charCode < START_CODE && charCode > END_CODE) return input\n\n    return String.fromCharCode(\n      START_CODE + ((charCode - START_CODE + this.offset) % 26)\n    )\n  }\n\n  public backwardTransfer(input: string): string {\n    if (input.length !== 1)\n      throw new Error('Rotor.transfer: Input length must be 1')\n\n    let charCode = input.charCodeAt(0)\n    if (charCode < START_CODE && charCode > END_CODE) return input\n\n    return String.fromCharCode(\n      START_CODE + ((26 - ((charCode - START_CODE + this.offset) % 26)) % 26)\n    )\n  }\n}\n\nexport class Reflector implements Transferable {\n  constructor(private offset = 13) {}\n\n  public transfer(input: string) {\n    if (input.length !== 1)\n      throw new Error('Reflector.transfer: Input length must be 1')\n\n    let charCode = input.charCodeAt(0)\n    if (charCode < START_CODE && charCode > END_CODE) return input\n\n    return String.fromCharCode(\n      START_CODE + ((charCode - START_CODE + this.offset) % 26)\n    )\n  }\n}\n\nexport class Enigma {\n  private rotors: Rotor[] = []\n  private reflector: Reflector = new Reflector()\n  private plugBoard: PlugBoard = new PlugBoard()\n\n  constructor() {\n    console.log('Enigma was built.')\n  }\n\n  public resetConfig() {\n    this.rotors = []\n    this.plugBoard.clear()\n  }\n\n  public setConfig(config: EnigmnaConfig) {\n    this.resetConfig()\n\n    // Set rotors\n    for (let i = 0; i < config.rotorlOrders.length; i++) {\n      this.rotors.push(\n        new Rotor(config.rotorlOrders[i], config.rotorPositions[i])\n      )\n    }\n\n    // Set plug board\n    this.plugBoard.setPlugs(config.plugs)\n  }\n\n  public encrypt(input: string) {\n    let curValue = input.toUpperCase()\n\n    // Encrypt forward\n    curValue = this.plugBoard.transfer(curValue)\n\n    for (let i = 0; i < this.rotors.length; i++) {\n      curValue = this.rotors[i].forwardTransfer(curValue)\n    }\n\n    // Encrypt with reflector\n    curValue = this.reflector.transfer(curValue)\n\n    // Encrypt backward\n    for (let i = this.rotors.length - 1; i >= 0; i--) {\n      curValue = this.rotors[i].backwardTransfer(curValue)\n    }\n\n    curValue = this.plugBoard.transfer(curValue)\n\n    // Add one tick\n    this.addOneTick()\n\n    return curValue\n  }\n\n  public addOneTick() {\n    this.rotors[0].offset++\n    for (let i = 0; i < this.rotors.length; i++) {\n      if (i === 0) continue\n      if (this.rotors[i - 1].offset === 0) {\n        this.rotors[i].offset++\n      }\n    }\n  }\n\n  public subtractOneTick() {\n    let temp = this.rotors[0].offset - 1\n    this.rotors[0].offset = (26 + temp) % 26\n    for (let i = 0; i < this.rotors.length; i++) {\n      if (i === 0) continue\n      if (this.rotors[i - 1].offset === 25) {\n        let temp = this.rotors[i].offset - 1\n        this.rotors[i].offset = (26 + temp) % 26\n      }\n    }\n  }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport './App.scss'\nimport LightBulb, { LightBulbStatus } from './components/LightBulb'\nimport { Enigma } from './enigma/enigma'\nimport { config } from './enigma/enigma.config'\n\nconst enigma = new Enigma()\nenigma.setConfig(config)\n\nfunction createLightBulbs(): LightBulbStatus[][] {\n  const LIGHT_BULBS = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['Z', 'X', 'C', 'V', 'B', 'N', 'M'],\n  ]\n  return LIGHT_BULBS.map((row) =>\n    row.map((letter) => ({ letter, lightOn: false } as LightBulbStatus))\n  )\n}\n\nfunction LightBulbRow(bulbs: LightBulbStatus[]) {\n  const results = []\n\n  for (let bulb of bulbs) {\n    results.push(<LightBulb key={bulb.letter} bulb={bulb} />)\n  }\n\n  return results\n}\n\nfunction setLightBulbStatus(\n  lightBulbs: LightBulbStatus[][],\n  letter: string,\n  lightOn: boolean\n) {\n  for (let row of lightBulbs) {\n    for (let bulb of row) {\n      if (bulb.letter === letter) {\n        Object.assign(bulb, { lightOn })\n        return lightBulbs\n      }\n    }\n  }\n  return lightBulbs\n}\n\nfunction App() {\n  const defaultLightBulbs = createLightBulbs()\n  const [chars, setChars] = useState([] as string[])\n  const lightBulbs = useRef(defaultLightBulbs)\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (/^\\w$/.test(e.key)) {\n        const output = enigma.encrypt(e.key)\n        setLightBulbStatus(lightBulbs.current, output, true)\n        setChars([...chars, output])\n        setLightBulbStatus(lightBulbs.current, output, false)\n      } else if (e.code === 'Space') {\n        setChars([...chars, ' '])\n      } else if (e.code === 'Backspace') {\n        if (chars.length === 0) return\n        if (chars[chars.length - 1] !== ' ') {\n          enigma.subtractOneTick()\n        }\n        const clone = [...chars]\n        clone.splice(clone.length - 1, 1)\n        setChars(clone)\n      }\n    },\n    [chars, lightBulbs, setChars]\n  )\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown, false)\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleKeyDown])\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src=\"Enigma-logo.svg\" alt=\"Enigma\" />\n      </header>\n\n      <div className=\"indicator\">{chars}</div>\n\n      <div className=\"row\">{LightBulbRow(lightBulbs.current[0])}</div>\n      <div className=\"row\">{LightBulbRow(lightBulbs.current[1])}</div>\n      <div className=\"row\">{LightBulbRow(lightBulbs.current[2])}</div>\n    </div>\n  )\n}\n\nexport default App\n","import { EnigmnaConfig } from './enigma'\n\nexport const config: EnigmnaConfig = {\n  rotorlOrders: ['I', 'II', 'III'],\n  rotorPositions: [1, 2, 3],\n  plugs: [\n    'AX',\n    'BY',\n    'CZ',\n    'DU',\n    'EF',\n    'GH',\n    'IK',\n    'JL',\n    'MP',\n    'NO',\n    'QW',\n    'RT',\n    'SV',\n  ],\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}