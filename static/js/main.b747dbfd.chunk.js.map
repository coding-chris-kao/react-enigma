{"version":3,"sources":["components/LightBulb.tsx","utils/logger.ts","enigma/enigma.ts","App.tsx","enigma/enigma.config.ts","reportWebVitals.ts","index.tsx"],"names":["LightBulb","props","bulb","className","lightOn","letter","Logger","enableDebug","text","args","this","console","log","START_CODE","PlugBoard","input","has","get","plugs","split","p1","p2","set","Map","Rotor","no","offset","length","Error","charCode","charCodeAt","outcomePosition","String","fromCharCode","backwardPosition","Reflector","Enigma","rotors","reflector","plugBoard","logger","debug","clear","config","resetConfig","i","rotorlOrders","push","rotorPositions","setPlugs","curValue","toUpperCase","transfer","forwardTransfer","backwardTransfer","addOneTick","map","r","carry","mutateOffset","value","temp","enigma","LightBulbRow","bulbs","results","setLightBulbStatus","lightBulbs","row","Object","assign","setConfig","encrypt$","Subject","App","defaultLightBulbs","useState","chars","setChars","useRef","handleKeyDown","useCallback","e","next","handlePaste","clipboardData","getData","useEffect","document","addEventListener","encryptSubscription","pipe","debounceTime","subscribe","letters","outputs","output","encrypt","current","metaKey","test","key","code","subtractOneTick","clone","splice","removeEventListener","unsubscribe","src","alt","type","join","onChange","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b747dbfd.chunk.js","sourcesContent":["import './light-bulb.scss'\n\ninterface Props {\n  bulb: LightBulbStatus\n}\n\nexport interface LightBulbStatus {\n  letter: string\n  lightOn: boolean\n}\n\nfunction LightBulb(props: Props) {\n  const { bulb } = props\n\n  let className = 'light-bulb'\n  if (bulb.lightOn) className += ' on'\n\n  return <div className={className}>{bulb.letter}</div>\n}\n\nexport default LightBulb\n","export class Logger {\n  constructor(public enableDebug: boolean = false) {}\n\n  public debug(text: string, ...args: any[]) {\n    if (this.enableDebug) console.log(text, ...args)\n  }\n}\n","import { Logger } from '../utils/logger'\n\nconst DEBUG_MODE = false\nconst START_CODE = 65\nconst END_CODE = 90\n\nexport interface EnigmnaConfig {\n  rotorlOrders: string[]\n  rotorPositions: number[]\n  plugs: string[]\n}\n\nexport interface Transferable {\n  transfer(input: string): string\n}\n\nexport class PlugBoard extends Map implements Transferable {\n  public transfer(input: string) {\n    if (!this.has(input)) return input\n    return this.get(input)\n  }\n\n  public setPlugs(plugs: string[]) {\n    for (let plug of plugs) {\n      const [p1, p2] = plug.split('')\n      this.set(p1, p2)\n      this.set(p2, p1)\n    }\n  }\n}\n\nexport class Rotor {\n  constructor(public no: string, public offset: number) {}\n\n  public forwardTransfer(input: string): string {\n    if (input.length !== 1)\n      throw new Error('Rotor.transfer: Input length must be 1')\n\n    let charCode = input.charCodeAt(0)\n    if (charCode < START_CODE && charCode > END_CODE) return input\n\n    const outcomePosition = (charCode - START_CODE + this.offset) % 26\n    return String.fromCharCode(START_CODE + outcomePosition)\n  }\n\n  public backwardTransfer(input: string): string {\n    if (input.length !== 1)\n      throw new Error('Rotor.transfer: Input length must be 1')\n\n    let charCode = input.charCodeAt(0)\n    if (charCode < START_CODE && charCode > END_CODE) return input\n\n    const outcomePosition = (charCode - START_CODE + this.offset) % 26\n    const backwardPosition = (26 - outcomePosition) % 26\n    return String.fromCharCode(START_CODE + backwardPosition)\n  }\n}\n\nexport class Reflector implements Transferable {\n  constructor(private offset = 13) {}\n\n  public transfer(input: string) {\n    if (input.length !== 1)\n      throw new Error('Reflector.transfer: Input length must be 1')\n\n    let charCode = input.charCodeAt(0)\n    if (charCode < START_CODE && charCode > END_CODE) return input\n\n    return String.fromCharCode(\n      START_CODE + ((charCode - START_CODE + this.offset) % 26)\n    )\n  }\n}\n\nexport class Enigma {\n  private rotors: Rotor[] = []\n  private reflector: Reflector = new Reflector()\n  private plugBoard: PlugBoard = new PlugBoard()\n  private logger: Logger = new Logger(DEBUG_MODE)\n\n  constructor() {\n    this.logger.debug('Enigma was built.')\n  }\n\n  public resetConfig() {\n    this.rotors = []\n    this.plugBoard.clear()\n  }\n\n  public setConfig(config: EnigmnaConfig) {\n    this.resetConfig()\n\n    // Set rotors\n    for (let i = 0; i < config.rotorlOrders.length; i++) {\n      this.rotors.push(\n        new Rotor(config.rotorlOrders[i], config.rotorPositions[i])\n      )\n    }\n\n    // Set plug board\n    this.plugBoard.setPlugs(config.plugs)\n  }\n\n  public encrypt(input: string) {\n    let curValue = input.toUpperCase()\n    this.logger.debug(`Input: ${curValue}`)\n\n    // Encrypt forward\n    curValue = this.plugBoard.transfer(curValue)\n    this.logger.debug(`PlugBoard: ${curValue}`)\n\n    for (let i = 0; i < this.rotors.length; i++) {\n      curValue = this.rotors[i].forwardTransfer(curValue)\n      this.logger.debug(`Rotor ${i}: ${curValue}`)\n    }\n\n    // Encrypt with reflector\n    curValue = this.reflector.transfer(curValue)\n    this.logger.debug(`Reflector: ${curValue}`)\n\n    // Encrypt backward\n    for (let i = this.rotors.length - 1; i >= 0; i--) {\n      curValue = this.rotors[i].backwardTransfer(curValue)\n      this.logger.debug(`Rotor ${i}: ${curValue}`)\n    }\n\n    curValue = this.plugBoard.transfer(curValue)\n    this.logger.debug(`PlugBoard: ${curValue}`)\n\n    // Add one tick\n    this.addOneTick()\n    this.logger.debug(\n      'Offset: ',\n      this.rotors.map((r) => r.offset)\n    )\n\n    return curValue\n  }\n\n  public addOneTick() {\n    let carry = false\n    this.rotors[0].offset = this.mutateOffset(this.rotors[0].offset, 1)\n    if (this.rotors[0].offset === 0) carry = true\n\n    for (let i = 0; i < this.rotors.length; i++) {\n      if (i === 0) continue\n      if (!carry) break\n      this.rotors[i].offset = this.mutateOffset(this.rotors[i].offset, 1)\n      carry = false\n      if (this.rotors[i].offset === 0) carry = true\n    }\n  }\n\n  public subtractOneTick() {\n    let carry = false\n    this.rotors[0].offset = this.mutateOffset(this.rotors[0].offset, -1)\n    if (this.rotors[0].offset === 25) carry = true\n\n    for (let i = 0; i < this.rotors.length; i++) {\n      if (i === 0) continue\n      if (!carry) break\n      this.rotors[i].offset = this.mutateOffset(this.rotors[i].offset, -1)\n      carry = false\n      if (this.rotors[i].offset === 25) carry = true\n    }\n  }\n\n  /**\n   * To make sure the offset must in the boundary [0, 26)\n   * @param offset The offset before mutated\n   * @param value The value to mutate offset\n   * @returns New offset which is greater than 0 and less than 26\n   */\n  private mutateOffset(offset: number, value: number) {\n    let temp = (offset + value) % 26\n    if (temp < 0) {\n      temp = 26 + temp\n    }\n    return temp\n  }\n}\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { Subject } from 'rxjs'\nimport { debounceTime } from 'rxjs/operators'\nimport './App.scss'\nimport LightBulb, { LightBulbStatus } from './components/LightBulb'\nimport { Enigma } from './enigma/enigma'\nimport { config } from './enigma/enigma.config'\n\nconst enigma = new Enigma()\nenigma.setConfig(config)\n\nfunction createLightBulbs(): LightBulbStatus[][] {\n  const LIGHT_BULBS = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    ['Z', 'X', 'C', 'V', 'B', 'N', 'M'],\n  ]\n  return LIGHT_BULBS.map((row) =>\n    row.map((letter) => ({ letter, lightOn: false } as LightBulbStatus))\n  )\n}\n\nfunction LightBulbRow(bulbs: LightBulbStatus[]) {\n  const results = []\n\n  for (let bulb of bulbs) {\n    results.push(<LightBulb key={bulb.letter} bulb={bulb} />)\n  }\n\n  return results\n}\n\nfunction setLightBulbStatus(\n  lightBulbs: LightBulbStatus[][],\n  letter: string,\n  lightOn: boolean\n) {\n  for (let row of lightBulbs) {\n    for (let bulb of row) {\n      if (bulb.letter === letter) {\n        Object.assign(bulb, { lightOn })\n        return lightBulbs\n      }\n    }\n  }\n  return lightBulbs\n}\n\nconst encrypt$ = new Subject<KeyboardEvent | string>()\n\nfunction App() {\n  const defaultLightBulbs = createLightBulbs()\n  const [chars, setChars] = useState([] as string[])\n  const lightBulbs = useRef(defaultLightBulbs)\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    encrypt$.next(e)\n  }, [])\n\n  const handlePaste = useCallback((e: ClipboardEvent) => {\n    encrypt$.next(e.clipboardData?.getData('text') || '')\n  }, [])\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown, false)\n    document.addEventListener('paste', handlePaste, false)\n\n    const encryptSubscription = encrypt$\n      .pipe(debounceTime(10))\n      .subscribe((e: KeyboardEvent | string) => {\n        if (typeof e === 'string') {\n          const letters = e.split('')\n          const outputs = []\n          for (let letter of letters) {\n            const output = enigma.encrypt(letter)\n            setLightBulbStatus(lightBulbs.current, output, true)\n            outputs.push(output)\n          }\n          setChars([...chars, ...outputs])\n          for (let output of outputs) {\n            setLightBulbStatus(lightBulbs.current, output, false)\n          }\n        } else if (e.metaKey) {\n          return\n        } else if (/^\\w$/.test(e.key)) {\n          const output = enigma.encrypt(e.key)\n          setLightBulbStatus(lightBulbs.current, output, true)\n          setChars([...chars, output])\n          setLightBulbStatus(lightBulbs.current, output, false)\n        } else if (e.code === 'Space') {\n          setChars([...chars, ' '])\n        } else if (e.code === 'Backspace') {\n          if (chars.length === 0) return\n          if (chars[chars.length - 1] !== ' ') {\n            enigma.subtractOneTick()\n          }\n          const clone = [...chars]\n          clone.splice(clone.length - 1, 1)\n          setChars(clone)\n        }\n      })\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n      document.removeEventListener('paste', handlePaste)\n      encryptSubscription.unsubscribe()\n    }\n  }, [chars, lightBulbs, setChars, handleKeyDown, handlePaste])\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src=\"Enigma-logo.svg\" alt=\"Enigma\" />\n      </header>\n\n      <div className=\"input-wrapper\">\n        <input\n          type=\"text\"\n          className=\"enigma-input\"\n          value={chars.join('')}\n          onChange={(e) => e.preventDefault()}\n        />\n      </div>\n\n      <div className=\"row\">{LightBulbRow(lightBulbs.current[0])}</div>\n      <div className=\"row\">{LightBulbRow(lightBulbs.current[1])}</div>\n      <div className=\"row\">{LightBulbRow(lightBulbs.current[2])}</div>\n    </div>\n  )\n}\n\nexport default App\n","import { EnigmnaConfig } from './enigma'\n\nexport const config: EnigmnaConfig = {\n  rotorlOrders: ['I', 'II', 'III'],\n  rotorPositions: [1, 2, 3],\n  plugs: [\n    'AX',\n    'BY',\n    'CZ',\n    'DU',\n    'EF',\n    'GH',\n    'IK',\n    'JL',\n    'MP',\n    'NO',\n    'QW',\n    'RT',\n    'SV',\n  ],\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}